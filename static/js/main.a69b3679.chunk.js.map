{"version":3,"sources":["ContactUs.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","name","email","subject","message","handleChange","param","e","setState","target","value","preventDefault","this","console","log","templateParams","from_name","to_name","message_html","emailjs","alert","resetForm","Form","onSubmit","handleSubmit","bind","className","type","onChange","placeholder","onFocus","onBlur","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"6RA2DeA,E,4MAtDPC,MAAQ,CACJC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,I,EA8BrBC,aAAe,SAACC,EAAOC,GACnB,EAAKC,SAAL,eAAiBF,EAAQC,EAAEE,OAAOC,S,2DA5BzBH,GACTA,EAAEI,iBADU,MAE8BC,KAAKZ,MAAjCE,GAFF,EAEJD,KAFI,EAEEC,OAAOC,EAFT,EAESA,QAASC,EAFlB,EAEkBA,QAC9BS,QAAQC,IAAIF,KAAKZ,OACjB,IAAIe,EAAiB,CACnBC,UAAWd,EACXe,QAAS,UACTd,QAASA,EACTe,aAAcd,GAEfe,OACG,QACA,oBACAJ,EACC,8BAEJK,MAAM,iBACNR,KAAKS,c,kCAGNT,KAAKJ,SAAS,CACZP,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,O,+BAML,IAAD,EACL,OACE,oCACE,6BAEE,kBAACkB,EAAA,EAAD,CAAMC,SAAUX,KAAKY,aAAaC,KAAKb,OACrC,2BAAOc,UAAU,aAAaC,KAAK,QAAQ1B,KAAK,QAAQS,MAAOE,KAAKZ,MAAME,MAAO0B,SAAUhB,KAAKP,aAAaoB,KAAKb,KAAM,SAAUiB,YAAY,eAAeC,QAAQ,kDAAkDC,OAAO,oDAC9N,2BAAOL,UAAU,aAAaC,KAAK,OAAO1B,KAAK,OAAOS,MAAOE,KAAKZ,MAAMC,KAAM2B,SAAUhB,KAAKP,aAAaoB,KAAKb,KAAM,QAASiB,YAAY,cAAeC,QAAQ,kDAAkDC,OAAO,oDAC1N,iCAAUL,UAAU,uBAAuBhB,MAAOE,KAAKZ,MAAMI,QAASwB,SAAUhB,KAAKP,aAAaoB,KAAKb,KAAM,WAAYiB,YAAY,kBAArI,yBAAgKjB,KAAKP,aAAaoB,KAAKb,KAAM,YAA7L,qBAA8M,KAA9M,qBAAuN,KAAvN,wBAAmO,mDAAnO,uBAA4R,mDAA5R,qBACA,2BAAOc,UAAU,YAAYC,KAAK,SAASjB,MAAM,wB,GA/CnCsB,a,MCQXC,MARf,WACE,OACE,yBAAKP,UAAU,OACd,kBAAC,EAAD,QCKeQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAM/C,c","file":"static/js/main.a69b3679.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as emailjs from 'emailjs-com'\nimport { Form } from 'reactstrap'\n\nclass ContactForm extends Component {\n        state = {\n            name: '',\n            email: '',\n            subject: '',\n            message: '',\n          }\n\nhandleSubmit(e) {\n    e.preventDefault()\n    const { name, email, subject, message } = this.state;\n    console.log(this.state)\n    let templateParams = {\n      from_name: email,\n      to_name: 'support',\n      subject: subject,\n      message_html: message,\n     }\n     emailjs.send(\n        'gmail',\n        'template_srhB7xeV',\n        templateParams,\n         'user_dmLU5w3tDVptS5FdUvsPR',\n     )\n     alert('Message sent!')\n     this.resetForm()\n }\nresetForm() {\n    this.setState({\n      name: '',\n      email: '',\n      subject: '',\n      message: '',\n    })\n  }\nhandleChange = (param, e) => {\n    this.setState({ [param]: e.target.value })\n  }\nrender() {\n    return (\n      <>\n        <div>\n            \n          <Form onSubmit={this.handleSubmit.bind(this)}>\n            <input className=\"input-text\" type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange.bind(this, 'email')} placeholder=\"Your Email *\" onFocus=\"if(this.value==this.defaultValue)this.value='';\" onBlur=\"if(this.value=='')this.value=this.defaultValue;\"></input>\n            <input className=\"input-text\" type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange.bind(this, 'name')} placeholder=\"Your Name *\"  onFocus=\"if(this.value==this.defaultValue)this.value='';\" onBlur=\"if(this.value=='')this.value=this.defaultValue;\"></input>\n            <textarea className=\"input-text text-area\" value={this.state.message} onChange={this.handleChange.bind(this, 'message')} placeholder=\"Your Message *\" onChange={this.handleChange.bind(this, 'message')} cols=\"0\" rows=\"0\" onFocus=\"if(this.value==this.defaultValue)this.value='';\" onBlur=\"if(this.value=='')this.value=this.defaultValue;\">Your Message *</textarea>\n            <input className=\"input-btn\" type=\"submit\" value=\"SEND MESSAGE\"></input>\n          </Form>\n          \n        </div>\n      </>\n    )\n  }\n}\nexport default ContactForm","import React from 'react';\nimport ContactForm from './ContactUs';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <ContactForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}